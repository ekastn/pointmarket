// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lesson.sql

package gen

import (
	"context"
	"database/sql"
	"encoding/json"
)

const countLessonsByCourseID = `-- name: CountLessonsByCourseID :one
SELECT COUNT(*) FROM lessons WHERE course_id = ?
`

func (q *Queries) CountLessonsByCourseID(ctx context.Context, courseID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLessonsByCourseID, courseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLesson = `-- name: CreateLesson :execresult
INSERT INTO lessons (
    course_id, title, ordinal, content
) VALUES (
    ?, ?, ?, ?
)
`

type CreateLessonParams struct {
	CourseID int64           `json:"course_id"`
	Title    string          `json:"title"`
	Ordinal  int32           `json:"ordinal"`
	Content  json.RawMessage `json:"content"`
}

func (q *Queries) CreateLesson(ctx context.Context, arg CreateLessonParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createLesson,
		arg.CourseID,
		arg.Title,
		arg.Ordinal,
		arg.Content,
	)
}

const deleteLesson = `-- name: DeleteLesson :exec
DELETE FROM lessons
WHERE id = ?
`

func (q *Queries) DeleteLesson(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLesson, id)
	return err
}

const getLessonByID = `-- name: GetLessonByID :one
SELECT id, course_id, title, ordinal, content
FROM lessons
WHERE id = ?
`

func (q *Queries) GetLessonByID(ctx context.Context, id int64) (Lesson, error) {
	row := q.db.QueryRowContext(ctx, getLessonByID, id)
	var i Lesson
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Title,
		&i.Ordinal,
		&i.Content,
	)
	return i, err
}

const getLessonsByCourseID = `-- name: GetLessonsByCourseID :many
SELECT id, course_id, title, ordinal, content
FROM lessons
WHERE course_id = ?
ORDER BY ordinal ASC, id ASC
LIMIT ? OFFSET ?
`

type GetLessonsByCourseIDParams struct {
	CourseID int64 `json:"course_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) GetLessonsByCourseID(ctx context.Context, arg GetLessonsByCourseIDParams) ([]Lesson, error) {
	rows, err := q.db.QueryContext(ctx, getLessonsByCourseID, arg.CourseID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lesson
	for rows.Next() {
		var i Lesson
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.Title,
			&i.Ordinal,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLesson = `-- name: UpdateLesson :exec
UPDATE lessons
SET
    title = ?,
    ordinal = ?,
    content = ?
WHERE id = ?
`

type UpdateLessonParams struct {
	Title   string          `json:"title"`
	Ordinal int32           `json:"ordinal"`
	Content json.RawMessage `json:"content"`
	ID      int64           `json:"id"`
}

func (q *Queries) UpdateLesson(ctx context.Context, arg UpdateLessonParams) error {
	_, err := q.db.ExecContext(ctx, updateLesson,
		arg.Title,
		arg.Ordinal,
		arg.Content,
		arg.ID,
	)
	return err
}
