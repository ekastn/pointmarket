// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: missions.sql

package gen

import (
	"context"
	"strings"
)

const getMissionsByIDs = `-- name: GetMissionsByIDs :many
SELECT 
  id,
  title,
  description,
  reward_points,
  metadata,
  created_at,
  updated_at
FROM missions
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetMissionsByIDs(ctx context.Context, ids []int64) ([]Mission, error) {
	query := getMissionsByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mission
	for rows.Next() {
		var i Mission
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.RewardPoints,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
