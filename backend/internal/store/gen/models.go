// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package gen

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type AssignmentsStatus string

const (
	AssignmentsStatusDraft     AssignmentsStatus = "draft"
	AssignmentsStatusPublished AssignmentsStatus = "published"
	AssignmentsStatusArchived  AssignmentsStatus = "archived"
)

func (e *AssignmentsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AssignmentsStatus(s)
	case string:
		*e = AssignmentsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AssignmentsStatus: %T", src)
	}
	return nil
}

type NullAssignmentsStatus struct {
	AssignmentsStatus AssignmentsStatus `json:"assignments_status"`
	Valid             bool              `json:"valid"` // Valid is true if AssignmentsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAssignmentsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AssignmentsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AssignmentsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAssignmentsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AssignmentsStatus), nil
}

type QuestionnaireVarkOptionsLearningStyle string

const (
	QuestionnaireVarkOptionsLearningStyleVisual      QuestionnaireVarkOptionsLearningStyle = "Visual"
	QuestionnaireVarkOptionsLearningStyleAuditory    QuestionnaireVarkOptionsLearningStyle = "Auditory"
	QuestionnaireVarkOptionsLearningStyleReading     QuestionnaireVarkOptionsLearningStyle = "Reading"
	QuestionnaireVarkOptionsLearningStyleKinesthetic QuestionnaireVarkOptionsLearningStyle = "Kinesthetic"
)

func (e *QuestionnaireVarkOptionsLearningStyle) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuestionnaireVarkOptionsLearningStyle(s)
	case string:
		*e = QuestionnaireVarkOptionsLearningStyle(s)
	default:
		return fmt.Errorf("unsupported scan type for QuestionnaireVarkOptionsLearningStyle: %T", src)
	}
	return nil
}

type NullQuestionnaireVarkOptionsLearningStyle struct {
	QuestionnaireVarkOptionsLearningStyle QuestionnaireVarkOptionsLearningStyle `json:"questionnaire_vark_options_learning_style"`
	Valid                                 bool                                  `json:"valid"` // Valid is true if QuestionnaireVarkOptionsLearningStyle is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuestionnaireVarkOptionsLearningStyle) Scan(value interface{}) error {
	if value == nil {
		ns.QuestionnaireVarkOptionsLearningStyle, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuestionnaireVarkOptionsLearningStyle.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuestionnaireVarkOptionsLearningStyle) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuestionnaireVarkOptionsLearningStyle), nil
}

type QuestionnairesStatus string

const (
	QuestionnairesStatusActive   QuestionnairesStatus = "active"
	QuestionnairesStatusInactive QuestionnairesStatus = "inactive"
)

func (e *QuestionnairesStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuestionnairesStatus(s)
	case string:
		*e = QuestionnairesStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for QuestionnairesStatus: %T", src)
	}
	return nil
}

type NullQuestionnairesStatus struct {
	QuestionnairesStatus QuestionnairesStatus `json:"questionnaires_status"`
	Valid                bool                 `json:"valid"` // Valid is true if QuestionnairesStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuestionnairesStatus) Scan(value interface{}) error {
	if value == nil {
		ns.QuestionnairesStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuestionnairesStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuestionnairesStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuestionnairesStatus), nil
}

type QuestionnairesType string

const (
	QuestionnairesTypeMSLQ QuestionnairesType = "MSLQ"
	QuestionnairesTypeAMS  QuestionnairesType = "AMS"
	QuestionnairesTypeVARK QuestionnairesType = "VARK"
)

func (e *QuestionnairesType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuestionnairesType(s)
	case string:
		*e = QuestionnairesType(s)
	default:
		return fmt.Errorf("unsupported scan type for QuestionnairesType: %T", src)
	}
	return nil
}

type NullQuestionnairesType struct {
	QuestionnairesType QuestionnairesType `json:"questionnaires_type"`
	Valid              bool               `json:"valid"` // Valid is true if QuestionnairesType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuestionnairesType) Scan(value interface{}) error {
	if value == nil {
		ns.QuestionnairesType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuestionnairesType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuestionnairesType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuestionnairesType), nil
}

type QuizzesStatus string

const (
	QuizzesStatusDraft     QuizzesStatus = "draft"
	QuizzesStatusPublished QuizzesStatus = "published"
	QuizzesStatusArchived  QuizzesStatus = "archived"
)

func (e *QuizzesStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuizzesStatus(s)
	case string:
		*e = QuizzesStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for QuizzesStatus: %T", src)
	}
	return nil
}

type NullQuizzesStatus struct {
	QuizzesStatus QuizzesStatus `json:"quizzes_status"`
	Valid         bool          `json:"valid"` // Valid is true if QuizzesStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuizzesStatus) Scan(value interface{}) error {
	if value == nil {
		ns.QuizzesStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuizzesStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuizzesStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuizzesStatus), nil
}

type StudentAssignmentsStatus string

const (
	StudentAssignmentsStatusNotStarted StudentAssignmentsStatus = "not_started"
	StudentAssignmentsStatusInProgress StudentAssignmentsStatus = "in_progress"
	StudentAssignmentsStatusCompleted  StudentAssignmentsStatus = "completed"
)

func (e *StudentAssignmentsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StudentAssignmentsStatus(s)
	case string:
		*e = StudentAssignmentsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for StudentAssignmentsStatus: %T", src)
	}
	return nil
}

type NullStudentAssignmentsStatus struct {
	StudentAssignmentsStatus StudentAssignmentsStatus `json:"student_assignments_status"`
	Valid                    bool                     `json:"valid"` // Valid is true if StudentAssignmentsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStudentAssignmentsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.StudentAssignmentsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StudentAssignmentsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStudentAssignmentsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StudentAssignmentsStatus), nil
}

type StudentQuestionnaireVarkResultsVarkType string

const (
	StudentQuestionnaireVarkResultsVarkTypeDominant   StudentQuestionnaireVarkResultsVarkType = "dominant"
	StudentQuestionnaireVarkResultsVarkTypeMultimodal StudentQuestionnaireVarkResultsVarkType = "multimodal"
)

func (e *StudentQuestionnaireVarkResultsVarkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StudentQuestionnaireVarkResultsVarkType(s)
	case string:
		*e = StudentQuestionnaireVarkResultsVarkType(s)
	default:
		return fmt.Errorf("unsupported scan type for StudentQuestionnaireVarkResultsVarkType: %T", src)
	}
	return nil
}

type NullStudentQuestionnaireVarkResultsVarkType struct {
	StudentQuestionnaireVarkResultsVarkType StudentQuestionnaireVarkResultsVarkType `json:"student_questionnaire_vark_results_vark_type"`
	Valid                                   bool                                    `json:"valid"` // Valid is true if StudentQuestionnaireVarkResultsVarkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStudentQuestionnaireVarkResultsVarkType) Scan(value interface{}) error {
	if value == nil {
		ns.StudentQuestionnaireVarkResultsVarkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StudentQuestionnaireVarkResultsVarkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStudentQuestionnaireVarkResultsVarkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StudentQuestionnaireVarkResultsVarkType), nil
}

type StudentQuizzesStatus string

const (
	StudentQuizzesStatusNotStarted StudentQuizzesStatus = "not_started"
	StudentQuizzesStatusInProgress StudentQuizzesStatus = "in_progress"
	StudentQuizzesStatusCompleted  StudentQuizzesStatus = "completed"
)

func (e *StudentQuizzesStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StudentQuizzesStatus(s)
	case string:
		*e = StudentQuizzesStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for StudentQuizzesStatus: %T", src)
	}
	return nil
}

type NullStudentQuizzesStatus struct {
	StudentQuizzesStatus StudentQuizzesStatus `json:"student_quizzes_status"`
	Valid                bool                 `json:"valid"` // Valid is true if StudentQuizzesStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStudentQuizzesStatus) Scan(value interface{}) error {
	if value == nil {
		ns.StudentQuizzesStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StudentQuizzesStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStudentQuizzesStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StudentQuizzesStatus), nil
}

type UserLearningStylesType string

const (
	UserLearningStylesTypeDominant   UserLearningStylesType = "dominant"
	UserLearningStylesTypeMultimodal UserLearningStylesType = "multimodal"
)

func (e *UserLearningStylesType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserLearningStylesType(s)
	case string:
		*e = UserLearningStylesType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserLearningStylesType: %T", src)
	}
	return nil
}

type NullUserLearningStylesType struct {
	UserLearningStylesType UserLearningStylesType `json:"user_learning_styles_type"`
	Valid                  bool                   `json:"valid"` // Valid is true if UserLearningStylesType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserLearningStylesType) Scan(value interface{}) error {
	if value == nil {
		ns.UserLearningStylesType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserLearningStylesType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserLearningStylesType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserLearningStylesType), nil
}

type UsersRole string

const (
	UsersRoleAdmin UsersRole = "admin"
	UsersRoleSiswa UsersRole = "siswa"
	UsersRoleGuru  UsersRole = "guru"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole `json:"users_role"`
	Valid     bool      `json:"valid"` // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type WeeklyEvaluationsStatus string

const (
	WeeklyEvaluationsStatusPending   WeeklyEvaluationsStatus = "pending"
	WeeklyEvaluationsStatusCompleted WeeklyEvaluationsStatus = "completed"
	WeeklyEvaluationsStatusOverdue   WeeklyEvaluationsStatus = "overdue"
)

func (e *WeeklyEvaluationsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WeeklyEvaluationsStatus(s)
	case string:
		*e = WeeklyEvaluationsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for WeeklyEvaluationsStatus: %T", src)
	}
	return nil
}

type NullWeeklyEvaluationsStatus struct {
	WeeklyEvaluationsStatus WeeklyEvaluationsStatus `json:"weekly_evaluations_status"`
	Valid                   bool                    `json:"valid"` // Valid is true if WeeklyEvaluationsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWeeklyEvaluationsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.WeeklyEvaluationsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WeeklyEvaluationsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWeeklyEvaluationsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WeeklyEvaluationsStatus), nil
}

type Assignment struct {
	ID           int64                 `json:"id"`
	Title        string                `json:"title"`
	Description  sql.NullString        `json:"description"`
	CourseID     int64                 `json:"course_id"`
	RewardPoints int32                 `json:"reward_points"`
	DueDate      sql.NullTime          `json:"due_date"`
	Status       NullAssignmentsStatus `json:"status"`
	CreatedAt    time.Time             `json:"created_at"`
	UpdatedAt    time.Time             `json:"updated_at"`
}

type Badge struct {
	ID          int64           `json:"id"`
	Title       string          `json:"title"`
	Description sql.NullString  `json:"description"`
	Criteria    json.RawMessage `json:"criteria"`
	Repeatable  bool            `json:"repeatable"`
	CreatedAt   time.Time       `json:"created_at"`
}

type Course struct {
	ID          int64           `json:"id"`
	Title       string          `json:"title"`
	Slug        string          `json:"slug"`
	Description sql.NullString  `json:"description"`
	OwnerID     int64           `json:"owner_id"`
	Metadata    json.RawMessage `json:"metadata"`
	CreatedAt   time.Time       `json:"created_at"`
	UpdatedAt   time.Time       `json:"updated_at"`
}

type Lesson struct {
	ID       int64           `json:"id"`
	CourseID int64           `json:"course_id"`
	Title    string          `json:"title"`
	Ordinal  int32           `json:"ordinal"`
	Content  json.RawMessage `json:"content"`
}

type Mission struct {
	ID           int64           `json:"id"`
	Title        string          `json:"title"`
	Description  sql.NullString  `json:"description"`
	RewardPoints sql.NullInt32   `json:"reward_points"`
	Metadata     json.RawMessage `json:"metadata"`
	CreatedAt    time.Time       `json:"created_at"`
	UpdatedAt    time.Time       `json:"updated_at"`
}

type PointsTransaction struct {
	ID            int64          `json:"id"`
	UserID        int64          `json:"user_id"`
	Amount        int32          `json:"amount"`
	Reason        sql.NullString `json:"reason"`
	ReferenceType sql.NullString `json:"reference_type"`
	ReferenceID   sql.NullInt64  `json:"reference_id"`
	CreatedAt     time.Time      `json:"created_at"`
}

type Product struct {
	ID            int64           `json:"id"`
	CategoryID    sql.NullInt32   `json:"category_id"`
	Name          string          `json:"name"`
	Description   sql.NullString  `json:"description"`
	PointsPrice   int32           `json:"points_price"`
	Type          string          `json:"type"`
	StockQuantity sql.NullInt32   `json:"stock_quantity"`
	IsActive      bool            `json:"is_active"`
	Metadata      json.RawMessage `json:"metadata"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
}

type ProductCategory struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

type ProductCourseDetail struct {
	ProductID          int64          `json:"product_id"`
	CourseID           int64          `json:"course_id"`
	AccessDurationDays sql.NullInt32  `json:"access_duration_days"`
	EnrollmentBehavior sql.NullString `json:"enrollment_behavior"`
}

type ProductMedium struct {
	ID        int64           `json:"id"`
	ProductID int64           `json:"product_id"`
	Type      string          `json:"type"`
	Url       string          `json:"url"`
	Metadata  json.RawMessage `json:"metadata"`
}

type Questionnaire struct {
	ID             int32                    `json:"id"`
	Type           QuestionnairesType       `json:"type"`
	Name           string                   `json:"name"`
	Description    sql.NullString           `json:"description"`
	TotalQuestions int32                    `json:"total_questions"`
	Status         NullQuestionnairesStatus `json:"status"`
	CreatedAt      sql.NullTime             `json:"created_at"`
	UpdatedAt      sql.NullTime             `json:"updated_at"`
}

type QuestionnaireQuestion struct {
	ID              int32          `json:"id"`
	QuestionnaireID int32          `json:"questionnaire_id"`
	QuestionNumber  int32          `json:"question_number"`
	QuestionText    string         `json:"question_text"`
	Subscale        sql.NullString `json:"subscale"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}

type QuestionnaireVarkOption struct {
	ID            int32                                 `json:"id"`
	QuestionID    int32                                 `json:"question_id"`
	OptionText    string                                `json:"option_text"`
	OptionLetter  string                                `json:"option_letter"`
	LearningStyle QuestionnaireVarkOptionsLearningStyle `json:"learning_style"`
	CreatedAt     sql.NullTime                          `json:"created_at"`
	UpdatedAt     sql.NullTime                          `json:"updated_at"`
}

type Quiz struct {
	ID              int64             `json:"id"`
	Title           string            `json:"title"`
	Description     sql.NullString    `json:"description"`
	CourseID        int64             `json:"course_id"`
	RewardPoints    int32             `json:"reward_points"`
	DurationMinutes sql.NullInt32     `json:"duration_minutes"`
	Status          NullQuizzesStatus `json:"status"`
	CreatedAt       time.Time         `json:"created_at"`
	UpdatedAt       time.Time         `json:"updated_at"`
}

type QuizQuestion struct {
	ID            int64           `json:"id"`
	QuizID        int64           `json:"quiz_id"`
	QuestionText  string          `json:"question_text"`
	QuestionType  string          `json:"question_type"`
	AnswerOptions json.RawMessage `json:"answer_options"`
	CorrectAnswer sql.NullString  `json:"correct_answer"`
}

type StudentAssignment struct {
	ID           int64                        `json:"id"`
	StudentID    int64                        `json:"student_id"`
	AssignmentID int64                        `json:"assignment_id"`
	Status       NullStudentAssignmentsStatus `json:"status"`
	Score        *float64                     `json:"score"`
	Submission   sql.NullString               `json:"submission"`
	SubmittedAt  sql.NullTime                 `json:"submitted_at"`
	GradedAt     sql.NullTime                 `json:"graded_at"`
	CreatedAt    sql.NullTime                 `json:"created_at"`
	UpdatedAt    sql.NullTime                 `json:"updated_at"`
}

type StudentCourse struct {
	StudentID  int64     `json:"student_id"`
	CourseID   int64     `json:"course_id"`
	EnrolledAt time.Time `json:"enrolled_at"`
}

type StudentQuestionnaireLikertResult struct {
	ID                 int64           `json:"id"`
	StudentID          int64           `json:"student_id"`
	QuestionnaireID    int32           `json:"questionnaire_id"`
	Answers            json.RawMessage `json:"answers"`
	TotalScore         float64         `json:"total_score"`
	SubscaleScores     json.RawMessage `json:"subscale_scores"`
	CreatedAt          sql.NullTime    `json:"created_at"`
	WeeklyEvaluationID sql.NullInt64   `json:"weekly_evaluation_id"`
}

type StudentQuestionnaireVarkResult struct {
	ID               int64                                   `json:"id"`
	StudentID        int64                                   `json:"student_id"`
	QuestionnaireID  int32                                   `json:"questionnaire_id"`
	VarkType         StudentQuestionnaireVarkResultsVarkType `json:"vark_type"`
	VarkLabel        string                                  `json:"vark_label"`
	ScoreVisual      int32                                   `json:"score_visual"`
	ScoreAuditory    int32                                   `json:"score_auditory"`
	ScoreReading     int32                                   `json:"score_reading"`
	ScoreKinesthetic int32                                   `json:"score_kinesthetic"`
	Answers          json.RawMessage                         `json:"answers"`
	CreatedAt        sql.NullTime                            `json:"created_at"`
}

type StudentQuiz struct {
	ID          int64                    `json:"id"`
	StudentID   int64                    `json:"student_id"`
	QuizID      int64                    `json:"quiz_id"`
	Score       sql.NullInt32            `json:"score"`
	Status      NullStudentQuizzesStatus `json:"status"`
	StartedAt   sql.NullTime             `json:"started_at"`
	CompletedAt sql.NullTime             `json:"completed_at"`
	CreatedAt   sql.NullTime             `json:"created_at"`
	UpdatedAt   sql.NullTime             `json:"updated_at"`
}

type TextAnalysisSnapshot struct {
	ID                             int64           `json:"id"`
	StudentID                      int64           `json:"student_id"`
	OriginalText                   string          `json:"original_text"`
	AverageWordLength              float64         `json:"average_word_length"`
	ReadingTime                    int32           `json:"reading_time"`
	CountWords                     int32           `json:"count_words"`
	CountSentences                 int32           `json:"count_sentences"`
	ScoreTotal                     float64         `json:"score_total"`
	ScoreGrammar                   float64         `json:"score_grammar"`
	ScoreStructure                 float64         `json:"score_structure"`
	ScoreReadability               float64         `json:"score_readability"`
	ScoreSentiment                 float64         `json:"score_sentiment"`
	ScoreComplexity                float64         `json:"score_complexity"`
	LearningPreferenceType         string          `json:"learning_preference_type"`
	LearningPreferenceLabel        string          `json:"learning_preference_label"`
	LearningPreferenceCombinedVark json.RawMessage `json:"learning_preference_combined_vark"`
	CreatedAt                      time.Time       `json:"created_at"`
}

type User struct {
	ID          int64     `json:"id"`
	Email       string    `json:"email"`
	Username    string    `json:"username"`
	Password    string    `json:"password"`
	DisplayName string    `json:"display_name"`
	Role        UsersRole `json:"role"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type UserBadge struct {
	UserID    int64     `json:"user_id"`
	BadgeID   int64     `json:"badge_id"`
	AwardedAt time.Time `json:"awarded_at"`
}

type UserLearningStyle struct {
	ID               int64                  `json:"id"`
	UserID           int64                  `json:"user_id"`
	Type             UserLearningStylesType `json:"type"`
	Label            string                 `json:"label"`
	ScoreVisual      *float64               `json:"score_visual"`
	ScoreAuditory    *float64               `json:"score_auditory"`
	ScoreReading     *float64               `json:"score_reading"`
	ScoreKinesthetic *float64               `json:"score_kinesthetic"`
	CreatedAt        time.Time              `json:"created_at"`
}

type UserMission struct {
	ID          int64           `json:"id"`
	MissionID   int64           `json:"mission_id"`
	UserID      int64           `json:"user_id"`
	Status      string          `json:"status"`
	StartedAt   time.Time       `json:"started_at"`
	CompletedAt sql.NullTime    `json:"completed_at"`
	Progress    json.RawMessage `json:"progress"`
}

type UserProfile struct {
	UserID    int64           `json:"user_id"`
	AvatarUrl sql.NullString  `json:"avatar_url"`
	Bio       sql.NullString  `json:"bio"`
	Metadata  json.RawMessage `json:"metadata"`
}

type UserStat struct {
	UserID      int64        `json:"user_id"`
	TotalPoints int64        `json:"total_points"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
}

type WeeklyEvaluation struct {
	ID              int64                   `json:"id"`
	StudentID       int64                   `json:"student_id"`
	QuestionnaireID int32                   `json:"questionnaire_id"`
	Status          WeeklyEvaluationsStatus `json:"status"`
	DueDate         time.Time               `json:"due_date"`
	CompletedAt     sql.NullTime            `json:"completed_at"`
	CreatedAt       time.Time               `json:"created_at"`
	UpdatedAt       time.Time               `json:"updated_at"`
}
