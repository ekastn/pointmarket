// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: progress.sql

package gen

import (
	"context"
	"encoding/json"
)

const createTextAnalysisSnapshot = `-- name: CreateTextAnalysisSnapshot :exec
INSERT INTO text_analysis_snapshots (
    student_id,
    original_text,
	average_word_length,
	reading_time,
    count_words,
    count_sentences,
    score_total,
    score_grammar,
    score_structure,
    score_readability,
    score_sentiment,
    score_complexity,
    learning_preference_type,
    learning_preference_label,
    learning_preference_combined_vark
) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
`

type CreateTextAnalysisSnapshotParams struct {
	StudentID                      int64           `json:"student_id"`
	OriginalText                   string          `json:"original_text"`
	AverageWordLength              float64         `json:"average_word_length"`
	ReadingTime                    int32           `json:"reading_time"`
	CountWords                     int32           `json:"count_words"`
	CountSentences                 int32           `json:"count_sentences"`
	ScoreTotal                     float64         `json:"score_total"`
	ScoreGrammar                   float64         `json:"score_grammar"`
	ScoreStructure                 float64         `json:"score_structure"`
	ScoreReadability               float64         `json:"score_readability"`
	ScoreSentiment                 float64         `json:"score_sentiment"`
	ScoreComplexity                float64         `json:"score_complexity"`
	LearningPreferenceType         string          `json:"learning_preference_type"`
	LearningPreferenceLabel        string          `json:"learning_preference_label"`
	LearningPreferenceCombinedVark json.RawMessage `json:"learning_preference_combined_vark"`
}

func (q *Queries) CreateTextAnalysisSnapshot(ctx context.Context, arg CreateTextAnalysisSnapshotParams) error {
	_, err := q.db.ExecContext(ctx, createTextAnalysisSnapshot,
		arg.StudentID,
		arg.OriginalText,
		arg.AverageWordLength,
		arg.ReadingTime,
		arg.CountWords,
		arg.CountSentences,
		arg.ScoreTotal,
		arg.ScoreGrammar,
		arg.ScoreStructure,
		arg.ScoreReadability,
		arg.ScoreSentiment,
		arg.ScoreComplexity,
		arg.LearningPreferenceType,
		arg.LearningPreferenceLabel,
		arg.LearningPreferenceCombinedVark,
	)
	return err
}
