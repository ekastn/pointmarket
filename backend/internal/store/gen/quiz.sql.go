// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quiz.sql

package gen

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createQuiz = `-- name: CreateQuiz :execresult

INSERT INTO quizzes (
    title, description, course_id, reward_points, duration_minutes, status
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateQuizParams struct {
	Title           string            `json:"title"`
	Description     sql.NullString    `json:"description"`
	CourseID        int64             `json:"course_id"`
	RewardPoints    int32             `json:"reward_points"`
	DurationMinutes sql.NullInt32     `json:"duration_minutes"`
	Status          NullQuizzesStatus `json:"status"`
}

// Quizzes --
func (q *Queries) CreateQuiz(ctx context.Context, arg CreateQuizParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createQuiz,
		arg.Title,
		arg.Description,
		arg.CourseID,
		arg.RewardPoints,
		arg.DurationMinutes,
		arg.Status,
	)
}

const createQuizQuestion = `-- name: CreateQuizQuestion :execresult

INSERT INTO quiz_questions (
    quiz_id, question_text, question_type, answer_options, correct_answer
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateQuizQuestionParams struct {
	QuizID        int64           `json:"quiz_id"`
	QuestionText  string          `json:"question_text"`
	QuestionType  string          `json:"question_type"`
	AnswerOptions json.RawMessage `json:"answer_options"`
	CorrectAnswer sql.NullString  `json:"correct_answer"`
}

// Quiz Questions --
func (q *Queries) CreateQuizQuestion(ctx context.Context, arg CreateQuizQuestionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createQuizQuestion,
		arg.QuizID,
		arg.QuestionText,
		arg.QuestionType,
		arg.AnswerOptions,
		arg.CorrectAnswer,
	)
}

const createStudentQuiz = `-- name: CreateStudentQuiz :execresult

INSERT INTO student_quizzes (
    student_id, quiz_id, status, started_at
) VALUES (
    ?, ?, ?, ?
)
`

type CreateStudentQuizParams struct {
	StudentID int64                    `json:"student_id"`
	QuizID    int64                    `json:"quiz_id"`
	Status    NullStudentQuizzesStatus `json:"status"`
	StartedAt sql.NullTime             `json:"started_at"`
}

// Student Quizzes --
func (q *Queries) CreateStudentQuiz(ctx context.Context, arg CreateStudentQuizParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createStudentQuiz,
		arg.StudentID,
		arg.QuizID,
		arg.Status,
		arg.StartedAt,
	)
}

const deleteQuiz = `-- name: DeleteQuiz :exec
DELETE FROM quizzes
WHERE id = ?
`

func (q *Queries) DeleteQuiz(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQuiz, id)
	return err
}

const deleteQuizQuestion = `-- name: DeleteQuizQuestion :exec
DELETE FROM quiz_questions
WHERE id = ?
`

func (q *Queries) DeleteQuizQuestion(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQuizQuestion, id)
	return err
}

const deleteStudentQuiz = `-- name: DeleteStudentQuiz :exec
DELETE FROM student_quizzes
WHERE id = ?
`

func (q *Queries) DeleteStudentQuiz(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudentQuiz, id)
	return err
}

const getQuizByID = `-- name: GetQuizByID :one
SELECT id, title, description, course_id, reward_points, duration_minutes, status, created_at, updated_at FROM quizzes
WHERE id = ?
`

func (q *Queries) GetQuizByID(ctx context.Context, id int64) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, getQuizByID, id)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CourseID,
		&i.RewardPoints,
		&i.DurationMinutes,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuizQuestionByID = `-- name: GetQuizQuestionByID :one
SELECT id, quiz_id, question_text, question_type, answer_options, correct_answer FROM quiz_questions
WHERE id = ?
`

func (q *Queries) GetQuizQuestionByID(ctx context.Context, id int64) (QuizQuestion, error) {
	row := q.db.QueryRowContext(ctx, getQuizQuestionByID, id)
	var i QuizQuestion
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.QuestionText,
		&i.QuestionType,
		&i.AnswerOptions,
		&i.CorrectAnswer,
	)
	return i, err
}

const getQuizQuestionsByQuizID = `-- name: GetQuizQuestionsByQuizID :many
SELECT id, quiz_id, question_text, question_type, answer_options, correct_answer FROM quiz_questions
WHERE quiz_id = ?
ORDER BY created_at ASC
`

func (q *Queries) GetQuizQuestionsByQuizID(ctx context.Context, quizID int64) ([]QuizQuestion, error) {
	rows, err := q.db.QueryContext(ctx, getQuizQuestionsByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QuizQuestion
	for rows.Next() {
		var i QuizQuestion
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.QuestionText,
			&i.QuestionType,
			&i.AnswerOptions,
			&i.CorrectAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuizzes = `-- name: GetQuizzes :many
SELECT id, title, description, course_id, reward_points, duration_minutes, status, created_at, updated_at FROM quizzes
ORDER BY created_at DESC
`

func (q *Queries) GetQuizzes(ctx context.Context) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, getQuizzes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CourseID,
			&i.RewardPoints,
			&i.DurationMinutes,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuizzesByCourseID = `-- name: GetQuizzesByCourseID :many
SELECT id, title, description, course_id, reward_points, duration_minutes, status, created_at, updated_at FROM quizzes
WHERE course_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetQuizzesByCourseID(ctx context.Context, courseID int64) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, getQuizzesByCourseID, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CourseID,
			&i.RewardPoints,
			&i.DurationMinutes,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuizzesByOwnerID = `-- name: GetQuizzesByOwnerID :many
SELECT q.id, q.title, q.description, q.course_id, q.reward_points, q.duration_minutes, q.status, q.created_at, q.updated_at FROM quizzes q
JOIN courses c ON q.course_id = c.id
WHERE c.owner_id = ?
ORDER BY q.created_at DESC
`

func (q *Queries) GetQuizzesByOwnerID(ctx context.Context, ownerID int64) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, getQuizzesByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CourseID,
			&i.RewardPoints,
			&i.DurationMinutes,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentQuizByID = `-- name: GetStudentQuizByID :one
SELECT id, student_id, quiz_id, score, status, started_at, completed_at, created_at, updated_at FROM student_quizzes
WHERE id = ?
`

func (q *Queries) GetStudentQuizByID(ctx context.Context, id int64) (StudentQuiz, error) {
	row := q.db.QueryRowContext(ctx, getStudentQuizByID, id)
	var i StudentQuiz
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.QuizID,
		&i.Score,
		&i.Status,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStudentQuizByIDs = `-- name: GetStudentQuizByIDs :one
SELECT id, student_id, quiz_id, score, status, started_at, completed_at, created_at, updated_at FROM student_quizzes
WHERE student_id = ? AND quiz_id = ?
`

type GetStudentQuizByIDsParams struct {
	StudentID int64 `json:"student_id"`
	QuizID    int64 `json:"quiz_id"`
}

func (q *Queries) GetStudentQuizByIDs(ctx context.Context, arg GetStudentQuizByIDsParams) (StudentQuiz, error) {
	row := q.db.QueryRowContext(ctx, getStudentQuizByIDs, arg.StudentID, arg.QuizID)
	var i StudentQuiz
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.QuizID,
		&i.Score,
		&i.Status,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStudentQuizzesByQuizID = `-- name: GetStudentQuizzesByQuizID :many
SELECT sq.id, sq.student_id, sq.quiz_id, sq.score, sq.status, sq.started_at, sq.completed_at, sq.created_at, sq.updated_at,
       u.display_name AS student_name, u.email AS student_email
FROM student_quizzes sq
JOIN users u ON sq.student_id = u.id
WHERE sq.quiz_id = ?
ORDER BY sq.created_at DESC
`

type GetStudentQuizzesByQuizIDRow struct {
	ID           int64                    `json:"id"`
	StudentID    int64                    `json:"student_id"`
	QuizID       int64                    `json:"quiz_id"`
	Score        sql.NullInt32            `json:"score"`
	Status       NullStudentQuizzesStatus `json:"status"`
	StartedAt    sql.NullTime             `json:"started_at"`
	CompletedAt  sql.NullTime             `json:"completed_at"`
	CreatedAt    sql.NullTime             `json:"created_at"`
	UpdatedAt    sql.NullTime             `json:"updated_at"`
	StudentName  string                   `json:"student_name"`
	StudentEmail string                   `json:"student_email"`
}

func (q *Queries) GetStudentQuizzesByQuizID(ctx context.Context, quizID int64) ([]GetStudentQuizzesByQuizIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentQuizzesByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentQuizzesByQuizIDRow
	for rows.Next() {
		var i GetStudentQuizzesByQuizIDRow
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.QuizID,
			&i.Score,
			&i.Status,
			&i.StartedAt,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StudentName,
			&i.StudentEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentQuizzesByStudentID = `-- name: GetStudentQuizzesByStudentID :many
SELECT sq.id, sq.student_id, sq.quiz_id, sq.score, sq.status, sq.started_at, sq.completed_at, sq.created_at, sq.updated_at,
       q.title AS quiz_title, q.description AS quiz_description, q.course_id AS quiz_course_id, q.reward_points AS quiz_reward_points, q.duration_minutes AS quiz_duration_minutes
FROM student_quizzes sq
JOIN quizzes q ON sq.quiz_id = q.id
WHERE sq.student_id = ?
ORDER BY sq.created_at DESC
`

type GetStudentQuizzesByStudentIDRow struct {
	ID                  int64                    `json:"id"`
	StudentID           int64                    `json:"student_id"`
	QuizID              int64                    `json:"quiz_id"`
	Score               sql.NullInt32            `json:"score"`
	Status              NullStudentQuizzesStatus `json:"status"`
	StartedAt           sql.NullTime             `json:"started_at"`
	CompletedAt         sql.NullTime             `json:"completed_at"`
	CreatedAt           sql.NullTime             `json:"created_at"`
	UpdatedAt           sql.NullTime             `json:"updated_at"`
	QuizTitle           string                   `json:"quiz_title"`
	QuizDescription     sql.NullString           `json:"quiz_description"`
	QuizCourseID        int64                    `json:"quiz_course_id"`
	QuizRewardPoints    int32                    `json:"quiz_reward_points"`
	QuizDurationMinutes sql.NullInt32            `json:"quiz_duration_minutes"`
}

func (q *Queries) GetStudentQuizzesByStudentID(ctx context.Context, studentID int64) ([]GetStudentQuizzesByStudentIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentQuizzesByStudentID, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentQuizzesByStudentIDRow
	for rows.Next() {
		var i GetStudentQuizzesByStudentIDRow
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.QuizID,
			&i.Score,
			&i.Status,
			&i.StartedAt,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.QuizTitle,
			&i.QuizDescription,
			&i.QuizCourseID,
			&i.QuizRewardPoints,
			&i.QuizDurationMinutes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuiz = `-- name: UpdateQuiz :exec
UPDATE quizzes
SET
    title = ?,
    description = ?,
    course_id = ?,
    reward_points = ?,
    duration_minutes = ?,
    status = ?
WHERE id = ?
`

type UpdateQuizParams struct {
	Title           string            `json:"title"`
	Description     sql.NullString    `json:"description"`
	CourseID        int64             `json:"course_id"`
	RewardPoints    int32             `json:"reward_points"`
	DurationMinutes sql.NullInt32     `json:"duration_minutes"`
	Status          NullQuizzesStatus `json:"status"`
	ID              int64             `json:"id"`
}

func (q *Queries) UpdateQuiz(ctx context.Context, arg UpdateQuizParams) error {
	_, err := q.db.ExecContext(ctx, updateQuiz,
		arg.Title,
		arg.Description,
		arg.CourseID,
		arg.RewardPoints,
		arg.DurationMinutes,
		arg.Status,
		arg.ID,
	)
	return err
}

const updateQuizQuestion = `-- name: UpdateQuizQuestion :exec
UPDATE quiz_questions
SET
    quiz_id = ?,
    question_text = ?,
    question_type = ?,
    answer_options = ?,
    correct_answer = ?
WHERE id = ?
`

type UpdateQuizQuestionParams struct {
	QuizID        int64           `json:"quiz_id"`
	QuestionText  string          `json:"question_text"`
	QuestionType  string          `json:"question_type"`
	AnswerOptions json.RawMessage `json:"answer_options"`
	CorrectAnswer sql.NullString  `json:"correct_answer"`
	ID            int64           `json:"id"`
}

func (q *Queries) UpdateQuizQuestion(ctx context.Context, arg UpdateQuizQuestionParams) error {
	_, err := q.db.ExecContext(ctx, updateQuizQuestion,
		arg.QuizID,
		arg.QuestionText,
		arg.QuestionType,
		arg.AnswerOptions,
		arg.CorrectAnswer,
		arg.ID,
	)
	return err
}

const updateStudentQuiz = `-- name: UpdateStudentQuiz :exec
UPDATE student_quizzes
SET
    score = ?,
    status = ?,
    started_at = ?,
    completed_at = ?
WHERE id = ?
`

type UpdateStudentQuizParams struct {
	Score       sql.NullInt32            `json:"score"`
	Status      NullStudentQuizzesStatus `json:"status"`
	StartedAt   sql.NullTime             `json:"started_at"`
	CompletedAt sql.NullTime             `json:"completed_at"`
	ID          int64                    `json:"id"`
}

func (q *Queries) UpdateStudentQuiz(ctx context.Context, arg UpdateStudentQuizParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentQuiz,
		arg.Score,
		arg.Status,
		arg.StartedAt,
		arg.CompletedAt,
		arg.ID,
	)
	return err
}
