// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: statistic.sql

package gen

import (
	"context"
)

const getAdminStatistic = `-- name: GetAdminStatistic :one
SELECT
    (
        SELECT
            COUNT(*)
        FROM
            users
    ) AS total_users,
    (
        SELECT
            COUNT(*)
        FROM
            users
        WHERE
            role = 'siswa'
    ) AS total_students,
    (
        SELECT
            COUNT(*)
        FROM
            users
        WHERE
            role = 'guru'
    ) AS total_teachers,
    (
        SELECT
            COUNT(*)
        FROM
            points_transactions
    ) AS total_points_transactions,
    (
        SELECT
            COUNT(*)
        FROM
            courses
    ) AS total_courses,
    (
        SELECT
            COUNT(*)
        FROM
            products
    ) AS total_products,
    (
        SELECT
            COUNT(*)
        FROM
            missions
    ) AS total_missions,
    (
        SELECT
            COUNT(*)
        FROM
            badges
    ) AS total_badges
`

type GetAdminStatisticRow struct {
	TotalUsers              int64 `json:"total_users"`
	TotalStudents           int64 `json:"total_students"`
	TotalTeachers           int64 `json:"total_teachers"`
	TotalPointsTransactions int64 `json:"total_points_transactions"`
	TotalCourses            int64 `json:"total_courses"`
	TotalProducts           int64 `json:"total_products"`
	TotalMissions           int64 `json:"total_missions"`
	TotalBadges             int64 `json:"total_badges"`
}

func (q *Queries) GetAdminStatistic(ctx context.Context) (GetAdminStatisticRow, error) {
	row := q.db.QueryRowContext(ctx, getAdminStatistic)
	var i GetAdminStatisticRow
	err := row.Scan(
		&i.TotalUsers,
		&i.TotalStudents,
		&i.TotalTeachers,
		&i.TotalPointsTransactions,
		&i.TotalCourses,
		&i.TotalProducts,
		&i.TotalMissions,
		&i.TotalBadges,
	)
	return i, err
}

const getStudentLearningStyle = `-- name: GetStudentLearningStyle :one
SELECT
    id, user_id, type, label, score_visual, score_auditory, score_reading, score_kinesthetic, created_at
FROM
    user_learning_styles
WHERE
    user_id = ?
ORDER BY
    created_at DESC
LIMIT
    1
`

func (q *Queries) GetStudentLearningStyle(ctx context.Context, userID int64) (UserLearningStyle, error) {
	row := q.db.QueryRowContext(ctx, getStudentLearningStyle, userID)
	var i UserLearningStyle
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Label,
		&i.ScoreVisual,
		&i.ScoreAuditory,
		&i.ScoreReading,
		&i.ScoreKinesthetic,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentStatistic = `-- name: GetStudentStatistic :one
SELECT
    (
        SELECT
            us.total_points
        FROM
            user_stats us
        WHERE
            us.user_id = u.id
    ) AS total_points,
    CAST(
        COALESCE(
            (
                SELECT
                    COUNT(*)
                FROM
                    student_assignments sa
                WHERE
                    sa.student_id = u.id
                    AND sa.status = 'completed'
            ) + (
                SELECT
                    COUNT(*)
                FROM
                    student_quizzes sq
                WHERE
                    sq.student_id = u.id
                    AND sq.status = 'completed'
            ),
            0
        ) AS SIGNED
    ) AS completed_assignments,
    (
        SELECT
            sqr.total_score
        FROM
            student_questionnaire_likert_results sqr
            JOIN questionnaires q ON sqr.questionnaire_id = q.id
        WHERE
            sqr.student_id = u.id
            AND q.type = 'MSLQ'
        ORDER BY
            sqr.created_at DESC
        LIMIT
            1
    ) AS mslq_score,
    (
        SELECT
            sqr.total_score
        FROM
            student_questionnaire_likert_results sqr
            JOIN questionnaires q ON sqr.questionnaire_id = q.id
        WHERE
            sqr.student_id = u.id
            AND q.type = 'AMS'
        ORDER BY
            sqr.created_at DESC
        LIMIT
            1
    ) AS ams_score
FROM
    users u
WHERE
    u.id = ?
    AND u.role = 'siswa'
`

type GetStudentStatisticRow struct {
	TotalPoints          int64   `json:"total_points"`
	CompletedAssignments int64   `json:"completed_assignments"`
	MslqScore            float64 `json:"mslq_score"`
	AmsScore             float64 `json:"ams_score"`
}

func (q *Queries) GetStudentStatistic(ctx context.Context, id int64) (GetStudentStatisticRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentStatistic, id)
	var i GetStudentStatisticRow
	err := row.Scan(
		&i.TotalPoints,
		&i.CompletedAssignments,
		&i.MslqScore,
		&i.AmsScore,
	)
	return i, err
}

const getTeacherStatistic = `-- name: GetTeacherStatistic :one
SELECT
    (
        SELECT
            COUNT(*)
        FROM
            assignments a
            JOIN courses c ON a.course_id = c.id
        WHERE
            c.owner_id = ?
    ) AS total_assignments,
    (
        SELECT
            COUNT(*)
        FROM
            courses c
        WHERE
            c.owner_id = ?
    ) AS total_courses,
    (
        SELECT
            COUNT(*)
        FROM
            quizzes q
            JOIN courses c ON q.course_id = c.id
        WHERE
            c.owner_id = ?
    ) AS total_quizzes,
    (
        SELECT
            COUNT(*)
        FROM
            users
        WHERE
            role = 'siswa'
    ) AS total_students
`

type GetTeacherStatisticParams struct {
	TeacherID int64 `json:"teacher_id"`
}

type GetTeacherStatisticRow struct {
	TotalAssignments int64 `json:"total_assignments"`
	TotalCourses     int64 `json:"total_courses"`
	TotalQuizzes     int64 `json:"total_quizzes"`
	TotalStudents    int64 `json:"total_students"`
}

func (q *Queries) GetTeacherStatistic(ctx context.Context, arg GetTeacherStatisticParams) (GetTeacherStatisticRow, error) {
	row := q.db.QueryRowContext(ctx, getTeacherStatistic, arg.TeacherID, arg.TeacherID, arg.TeacherID)
	var i GetTeacherStatisticRow
	err := row.Scan(
		&i.TotalAssignments,
		&i.TotalCourses,
		&i.TotalQuizzes,
		&i.TotalStudents,
	)
	return i, err
}
