// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: statistic.sql

package gen

import (
	"context"
)

const getAdminStatistic = `-- name: GetAdminStatistic :one
SELECT
    (
        SELECT
            COUNT(*)
        FROM
            users
    ) AS total_users,
    (
        SELECT
            COUNT(*)
        FROM
            users
        WHERE
            role = 'siswa'
    ) AS total_students,
    (
        SELECT
            COUNT(*)
        FROM
            users
        WHERE
            role = 'guru'
    ) AS total_teachers,
    (
        SELECT
            COUNT(*)
        FROM
            points_transactions
    ) AS total_points_transactions,
    (
        SELECT
            COUNT(*)
        FROM
            courses
    ) AS total_courses,
    (
        SELECT
            COUNT(*)
        FROM
            products
    ) AS total_products,
    (
        SELECT
            COUNT(*)
        FROM
            missions
    ) AS total_missions,
    (
        SELECT
            COUNT(*)
        FROM
            badges
    ) AS total_badges
`

type GetAdminStatisticRow struct {
	TotalUsers              int64 `json:"total_users"`
	TotalStudents           int64 `json:"total_students"`
	TotalTeachers           int64 `json:"total_teachers"`
	TotalPointsTransactions int64 `json:"total_points_transactions"`
	TotalCourses            int64 `json:"total_courses"`
	TotalProducts           int64 `json:"total_products"`
	TotalMissions           int64 `json:"total_missions"`
	TotalBadges             int64 `json:"total_badges"`
}

func (q *Queries) GetAdminStatistic(ctx context.Context) (GetAdminStatisticRow, error) {
	row := q.db.QueryRowContext(ctx, getAdminStatistic)
	var i GetAdminStatisticRow
	err := row.Scan(
		&i.TotalUsers,
		&i.TotalStudents,
		&i.TotalTeachers,
		&i.TotalPointsTransactions,
		&i.TotalCourses,
		&i.TotalProducts,
		&i.TotalMissions,
		&i.TotalBadges,
	)
	return i, err
}

const getStudentLearningStyle = `-- name: GetStudentLearningStyle :one
SELECT
    sls.id, sls.student_id, sls.type, sls.label, sls.score_visual, sls.score_auditory, sls.score_reading, sls.score_kinesthetic, sls.created_at
FROM
    student_learning_styles sls
    JOIN students s ON s.student_id = sls.student_id
WHERE
    s.user_id = ?
ORDER BY
    sls.created_at DESC
LIMIT
    1
`

func (q *Queries) GetStudentLearningStyle(ctx context.Context, userID int64) (StudentLearningStyle, error) {
	row := q.db.QueryRowContext(ctx, getStudentLearningStyle, userID)
	var i StudentLearningStyle
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.Type,
		&i.Label,
		&i.ScoreVisual,
		&i.ScoreAuditory,
		&i.ScoreReading,
		&i.ScoreKinesthetic,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentStatistic = `-- name: GetStudentStatistic :one
SELECT
	CAST(
        COALESCE(
            (
				SELECT
					us.total_points
				FROM
					user_stats us
				WHERE
					us.user_id = u.id
            ),
			0
        ) AS SIGNED	
	) AS total_points,
    CAST(
        COALESCE(
            (
                SELECT
                    COUNT(*)
                FROM
                    student_assignments sa
                    JOIN students s_sa ON s_sa.user_id = u.id
                WHERE
                    sa.student_id = s_sa.student_id
                    AND sa.status = 'completed'
            ),
            0
        ) AS SIGNED
    ) AS completed_assignments,
	CAST(
        COALESCE(
            (
				SELECT
					sqr.total_score
				FROM
					student_questionnaire_likert_results sqr
					JOIN questionnaires q ON sqr.questionnaire_id = q.id
                    JOIN students s_mslq ON s_mslq.user_id = u.id
				WHERE
					sqr.student_id = s_mslq.student_id
					AND q.type = 'MSLQ'
				ORDER BY
					sqr.created_at DESC
				LIMIT
					1
            ),
            0
        ) AS FLOAT
    ) AS mslq_score,
	CAST(
        COALESCE(
            (
				SELECT
					sqr.total_score
				FROM
					student_questionnaire_likert_results sqr
					JOIN questionnaires q ON sqr.questionnaire_id = q.id
                    JOIN students s_ams ON s_ams.user_id = u.id
				WHERE
					sqr.student_id = s_ams.student_id
					AND q.type = 'AMS'
				ORDER BY
					sqr.created_at DESC
				LIMIT
					1
            ),
            0
        ) AS FLOAT
    ) AS ams_score
FROM
    users u
WHERE
    u.id = ?
    AND u.role = 'siswa'
`

type GetStudentStatisticRow struct {
	TotalPoints          int64   `json:"total_points"`
	CompletedAssignments int64   `json:"completed_assignments"`
	MslqScore            float64 `json:"mslq_score"`
	AmsScore             float64 `json:"ams_score"`
}

func (q *Queries) GetStudentStatistic(ctx context.Context, id int64) (GetStudentStatisticRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentStatistic, id)
	var i GetStudentStatisticRow
	err := row.Scan(
		&i.TotalPoints,
		&i.CompletedAssignments,
		&i.MslqScore,
		&i.AmsScore,
	)
	return i, err
}

const getTeacherCourseInsights = `-- name: GetTeacherCourseInsights :many
SELECT
    c.id AS course_id,
    c.title AS course_title,
    CAST(COALESCE(mslq.avg_score, 0) AS DECIMAL(10,4)) AS avg_mslq,
    CAST(COALESCE(ams.avg_score, 0) AS DECIMAL(10,4)) AS avg_ams,
    CAST(COALESCE(vark.avg_visual, 0) AS DECIMAL(10,4)) AS avg_visual,
    CAST(COALESCE(vark.avg_auditory, 0) AS DECIMAL(10,4)) AS avg_auditory,
    CAST(COALESCE(vark.avg_reading, 0) AS DECIMAL(10,4)) AS avg_reading,
    CAST(COALESCE(vark.avg_kinesthetic, 0) AS DECIMAL(10,4)) AS avg_kinesthetic
FROM courses c
LEFT JOIN (
    SELECT sc.course_id, AVG(r.total_score) AS avg_score
    FROM student_courses sc
    JOIN (
        SELECT r1.student_id, r1.total_score
        FROM student_questionnaire_likert_results r1
        JOIN questionnaires q1 ON r1.questionnaire_id = q1.id
        JOIN (
            SELECT r2.student_id, MAX(r2.created_at) AS max_created_at
            FROM student_questionnaire_likert_results r2
            JOIN questionnaires q2 ON r2.questionnaire_id = q2.id
            WHERE q2.type = 'MSLQ'
            GROUP BY r2.student_id
        ) latest ON latest.student_id = r1.student_id AND r1.created_at = latest.max_created_at
        WHERE q1.type = 'MSLQ'
    ) r ON r.student_id = sc.student_id
    GROUP BY sc.course_id
) mslq ON mslq.course_id = c.id
LEFT JOIN (
    SELECT sc.course_id, AVG(r.total_score) AS avg_score
    FROM student_courses sc
    JOIN (
        SELECT r1.student_id, r1.total_score
        FROM student_questionnaire_likert_results r1
        JOIN questionnaires q1 ON r1.questionnaire_id = q1.id
        JOIN (
            SELECT r2.student_id, MAX(r2.created_at) AS max_created_at
            FROM student_questionnaire_likert_results r2
            JOIN questionnaires q2 ON r2.questionnaire_id = q2.id
            WHERE q2.type = 'AMS'
            GROUP BY r2.student_id
        ) latest ON latest.student_id = r1.student_id AND r1.created_at = latest.max_created_at
        WHERE q1.type = 'AMS'
    ) r ON r.student_id = sc.student_id
    GROUP BY sc.course_id
) ams ON ams.course_id = c.id
LEFT JOIN (
    SELECT sc.course_id,
           AVG(COALESCE(sls.score_visual, 0))      AS avg_visual,
           AVG(COALESCE(sls.score_auditory, 0))    AS avg_auditory,
           AVG(COALESCE(sls.score_reading, 0))     AS avg_reading,
           AVG(COALESCE(sls.score_kinesthetic, 0)) AS avg_kinesthetic
    FROM student_courses sc
    JOIN (
        SELECT sl1.id, sl1.student_id, sl1.type, sl1.label, sl1.score_visual, sl1.score_auditory, sl1.score_reading, sl1.score_kinesthetic, sl1.created_at
        FROM student_learning_styles sl1
        JOIN (
            SELECT student_id, MAX(created_at) AS max_created_at
            FROM student_learning_styles
            GROUP BY student_id
        ) latest_sls ON sl1.student_id = latest_sls.student_id AND sl1.created_at = latest_sls.max_created_at
    ) sls ON sls.student_id = sc.student_id
    GROUP BY sc.course_id
) vark ON vark.course_id = c.id
WHERE c.owner_id = ?
ORDER BY c.created_at DESC
LIMIT ?
`

type GetTeacherCourseInsightsParams struct {
	OwnerID int64 `json:"owner_id"`
	Limit   int32 `json:"limit"`
}

type GetTeacherCourseInsightsRow struct {
	CourseID       int64   `json:"course_id"`
	CourseTitle    string  `json:"course_title"`
	AvgMslq        float64 `json:"avg_mslq"`
	AvgAms         float64 `json:"avg_ams"`
	AvgVisual      float64 `json:"avg_visual"`
	AvgAuditory    float64 `json:"avg_auditory"`
	AvgReading     float64 `json:"avg_reading"`
	AvgKinesthetic float64 `json:"avg_kinesthetic"`
}

// Aggregates latest AMS, MSLQ, and VARK per course for a given teacher (owner)
func (q *Queries) GetTeacherCourseInsights(ctx context.Context, arg GetTeacherCourseInsightsParams) ([]GetTeacherCourseInsightsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeacherCourseInsights, arg.OwnerID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeacherCourseInsightsRow
	for rows.Next() {
		var i GetTeacherCourseInsightsRow
		if err := rows.Scan(
			&i.CourseID,
			&i.CourseTitle,
			&i.AvgMslq,
			&i.AvgAms,
			&i.AvgVisual,
			&i.AvgAuditory,
			&i.AvgReading,
			&i.AvgKinesthetic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeacherStatistic = `-- name: GetTeacherStatistic :one
SELECT
    (
        SELECT
            COUNT(*)
        FROM
            assignments a
            JOIN courses c ON a.course_id = c.id
        WHERE
            c.owner_id = ?
    ) AS total_assignments,
    (
        SELECT
            COUNT(*)
        FROM
            courses c
        WHERE
            c.owner_id = ?
    ) AS total_courses,
    (
        SELECT
            COUNT(*)
        FROM
            quizzes q
            JOIN courses c ON q.course_id = c.id
        WHERE
            c.owner_id = ?
    ) AS total_quizzes,
    (
        SELECT
            COUNT(*)
        FROM
            users
        WHERE
            role = 'siswa'
    ) AS total_students
`

type GetTeacherStatisticParams struct {
	TeacherID int64 `json:"teacher_id"`
}

type GetTeacherStatisticRow struct {
	TotalAssignments int64 `json:"total_assignments"`
	TotalCourses     int64 `json:"total_courses"`
	TotalQuizzes     int64 `json:"total_quizzes"`
	TotalStudents    int64 `json:"total_students"`
}

func (q *Queries) GetTeacherStatistic(ctx context.Context, arg GetTeacherStatisticParams) (GetTeacherStatisticRow, error) {
	row := q.db.QueryRowContext(ctx, getTeacherStatistic, arg.TeacherID, arg.TeacherID, arg.TeacherID)
	var i GetTeacherStatisticRow
	err := row.Scan(
		&i.TotalAssignments,
		&i.TotalCourses,
		&i.TotalQuizzes,
		&i.TotalStudents,
	)
	return i, err
}
