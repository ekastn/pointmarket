// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package gen

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  email, username, password, display_name, role
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Email       string    `json:"email"`
	Username    string    `json:"username"`
	Password    string    `json:"password"`
	DisplayName string    `json:"display_name"`
	Role        UsersRole `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.DisplayName,
		arg.Role,
	)
}

const createUserLearningStyle = `-- name: CreateUserLearningStyle :exec
INSERT INTO user_learning_styles
  (user_id, type, label, score_visual, score_auditory, score_reading, score_kinesthetic)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateUserLearningStyleParams struct {
	UserID           int64                  `json:"user_id"`
	Type             UserLearningStylesType `json:"type"`
	Label            string                 `json:"label"`
	ScoreVisual      *float64               `json:"score_visual"`
	ScoreAuditory    *float64               `json:"score_auditory"`
	ScoreReading     *float64               `json:"score_reading"`
	ScoreKinesthetic *float64               `json:"score_kinesthetic"`
}

func (q *Queries) CreateUserLearningStyle(ctx context.Context, arg CreateUserLearningStyleParams) error {
	_, err := q.db.ExecContext(ctx, createUserLearningStyle,
		arg.UserID,
		arg.Type,
		arg.Label,
		arg.ScoreVisual,
		arg.ScoreAuditory,
		arg.ScoreReading,
		arg.ScoreKinesthetic,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getActiveStudents = `-- name: GetActiveStudents :many
SELECT id, email, username, display_name FROM users
WHERE role = 'siswa'
`

type GetActiveStudentsRow struct {
	ID          int64  `json:"id"`
	Email       string `json:"email"`
	Username    string `json:"username"`
	DisplayName string `json:"display_name"`
}

func (q *Queries) GetActiveStudents(ctx context.Context) ([]GetActiveStudentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getActiveStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveStudentsRow
	for rows.Next() {
		var i GetActiveStudentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.DisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoles = `-- name: GetRoles :many
SELECT role FROM users
`

func (q *Queries) GetRoles(ctx context.Context) ([]UsersRole, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersRole
	for rows.Next() {
		var role UsersRole
		if err := rows.Scan(&role); err != nil {
			return nil, err
		}
		items = append(items, role)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password, display_name, role, created_at, updated_at FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, password, display_name, role, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, password, display_name, role, created_at, updated_at FROM users
WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.DisplayName,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, username, password, display_name, role, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.DisplayName,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const latestUserLearningStyle = `-- name: LatestUserLearningStyle :one
SELECT id, user_id, type, label, score_visual, score_auditory, score_reading, score_kinesthetic, created_at
FROM user_learning_styles
WHERE user_id = ?
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) LatestUserLearningStyle(ctx context.Context, userID int64) (UserLearningStyle, error) {
	row := q.db.QueryRowContext(ctx, latestUserLearningStyle, userID)
	var i UserLearningStyle
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Label,
		&i.ScoreVisual,
		&i.ScoreAuditory,
		&i.ScoreReading,
		&i.ScoreKinesthetic,
		&i.CreatedAt,
	)
	return i, err
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, email, username, password, display_name, role, created_at, updated_at FROM users
WHERE
  (display_name LIKE ? OR username LIKE ? OR email LIKE ?)
  AND
  (role = ? OR ? = '')
ORDER BY created_at DESC
`

type SearchUsersParams struct {
	DisplayName string    `json:"display_name"`
	Username    string    `json:"username"`
	Email       string    `json:"email"`
	Role        UsersRole `json:"role"`
}

func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers,
		arg.DisplayName,
		arg.Username,
		arg.Email,
		arg.Role,
		arg.Role,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.DisplayName,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  display_name = ?,
  email = ?
WHERE id = ?
`

type UpdateUserParams struct {
	DisplayName string `json:"display_name"`
	Email       string `json:"email"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.DisplayName, arg.Email, arg.ID)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE user_profiles
SET
  avatar_url = ?,
  bio = ?
WHERE user_id = ?
`

type UpdateUserProfileParams struct {
	AvatarUrl sql.NullString `json:"avatar_url"`
	Bio       sql.NullString `json:"bio"`
	UserID    int64          `json:"user_id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile, arg.AvatarUrl, arg.Bio, arg.UserID)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE users
SET
  role = ?
WHERE id = ?
`

type UpdateUserRoleParams struct {
	Role UsersRole `json:"role"`
	ID   int64     `json:"id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserRole, arg.Role, arg.ID)
	return err
}
